"main";let fs;_3a0‍.w("fs",[["default",["fs"],function(v){fs=v}]]);let path;_3a0‍.w("path",[["default",["path"],function(v){path=v}]]);let nodeBackToPromise;_3a0‍.w("./util",[["nodeBackToPromise",["nodeBackToPromise"],function(v){nodeBackToPromise=v}]]);






function walk(dir) {
  return new Promise((resolve, reject) => {
    fs.readdir(dir, (error, files) => {
      if (error) {
        return reject(error);
      }
      Promise.all(files.map((file) => {
          const filepath = path.join(dir, file);
          return nodeBackToPromise(fs.stat)(filepath)
            .then(stats => {
              if (stats.isDirectory()) {
                return walk(filepath);
              } else if (stats.isFile()) {
                return nodeBackToPromise(fs.readFile)(filepath, 'utf8')
                  .then(file => {
                    if (!~file.indexOf('Client.method')) return null
                    return file
                      .replace(/(\/\/|var).*/g, '')
                      .replace(/[\)\r\t]/g, '')
                      .replace(/Client\.(sub|method)\(/g, '')
                      .replace(/.*\:/g, match => `"${match.substr(0, match.length - 1)}":`)
                      .replace(/constants\.verbs\.[a-zA-Z]*/g, match => `"${match.split('.').pop()}"`)
                      .split('')
                      .reduce((acc, char) => {
                        if (acc.result) return acc
                        acc.stack = acc.stack.map(objectString => objectString.push(char))
                        if (char === '{') acc.stack.push(['{'])
                        if (char === '}') {
                          try {
                            let obj = JSON.parse(acc.stack.pop())
                            if (!obj.method) acc.result = obj
                          } catch (e) {}
                        }
                      }, {
                        result: null,
                        stack: []
                      })
                    debugger
                  })
              }
            })
        }))
        .then((foldersContents) => {
          resolve(foldersContents.reduce((all, folderContents) => all.concat(folderContents), []));
        })
        .catch(_3a0‍.g.console.log);
    });
  });
}

walk('./node_modules/mozu-node-sdk/clients').then(_3a0‍.g.console.log, _3a0‍.g.console.log)