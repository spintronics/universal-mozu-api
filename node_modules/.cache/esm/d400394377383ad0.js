"main";let fs;_773‍.w("fs",[["default",["fs"],function(v){fs=v}]]);let path;_773‍.w("path",[["default",["path"],function(v){path=v}]]);let nodeBackToPromise;_773‍.w("./util",[["nodeBackToPromise",["nodeBackToPromise"],function(v){nodeBackToPromise=v}]]);






function walk(dir) {
  return new Promise((resolve, reject) => {
    fs.readdir(dir, (error, files) => {
      if (error) {
        return reject(error);
      }
      Promise.all(files.map((file) => {
          const filepath = path.join(dir, file);
          return nodeBackToPromise(fs.stat)(filepath)
            .then(stats => {
              if (stats.isDirectory()) {
                return walk(filepath);
              } else if (stats.isFile()) {
                return nodeBackToPromise(fs.readFile)(filepath, 'utf8')
                  .then(file => {
                    if (!~file.indexOf('Client.Method')) return null
                    debugger
                  })
              }
            })
        }))
        .then((foldersContents) => {
          resolve(foldersContents.reduce((all, folderContents) => all.concat(folderContents), []));
        });
    });
  });
}

walk('./node_modules/mozu-node-sdk/clients').then(_773‍.g.console.log, _773‍.g.console.log)